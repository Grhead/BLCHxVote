// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: API/Proto/ProtoContract.proto

package Proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BLCH_ContractClient is the client API for BLCH_Contract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BLCH_ContractClient interface {
	ChainSize(ctx context.Context, in *Wpar, opts ...grpc.CallOption) (*ResponseSize, error)
}

type bLCH_ContractClient struct {
	cc grpc.ClientConnInterface
}

func NewBLCH_ContractClient(cc grpc.ClientConnInterface) BLCH_ContractClient {
	return &bLCH_ContractClient{cc}
}

func (c *bLCH_ContractClient) ChainSize(ctx context.Context, in *Wpar, opts ...grpc.CallOption) (*ResponseSize, error) {
	out := new(ResponseSize)
	err := c.cc.Invoke(ctx, "/Contract.BLCH_Contract/ChainSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BLCH_ContractServer is the server API for BLCH_Contract service.
// All implementations must embed UnimplementedBLCH_ContractServer
// for forward compatibility
type BLCH_ContractServer interface {
	ChainSize(context.Context, *Wpar) (*ResponseSize, error)
	mustEmbedUnimplementedBLCH_ContractServer()
}

// UnimplementedBLCH_ContractServer must be embedded to have forward compatible implementations.
type UnimplementedBLCH_ContractServer struct {
}

func (UnimplementedBLCH_ContractServer) ChainSize(context.Context, *Wpar) (*ResponseSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainSize not implemented")
}
func (UnimplementedBLCH_ContractServer) mustEmbedUnimplementedBLCH_ContractServer() {}

// UnsafeBLCH_ContractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BLCH_ContractServer will
// result in compilation errors.
type UnsafeBLCH_ContractServer interface {
	mustEmbedUnimplementedBLCH_ContractServer()
}

func RegisterBLCH_ContractServer(s grpc.ServiceRegistrar, srv BLCH_ContractServer) {
	s.RegisterService(&BLCH_Contract_ServiceDesc, srv)
}

func _BLCH_Contract_ChainSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Wpar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLCH_ContractServer).ChainSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contract.BLCH_Contract/ChainSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLCH_ContractServer).ChainSize(ctx, req.(*Wpar))
	}
	return interceptor(ctx, in, info, handler)
}

// BLCH_Contract_ServiceDesc is the grpc.ServiceDesc for BLCH_Contract service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BLCH_Contract_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Contract.BLCH_Contract",
	HandlerType: (*BLCH_ContractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChainSize",
			Handler:    _BLCH_Contract_ChainSize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "API/Proto/ProtoContract.proto",
}
