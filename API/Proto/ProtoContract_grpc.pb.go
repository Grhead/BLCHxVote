// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: API/Proto/ProtoContract.proto

package Proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BLCH_ContractClient is the client API for BLCH_Contract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BLCH_ContractClient interface {
	AuthRegister(ctx context.Context, in *RegData, opts ...grpc.CallOption) (*AuthRegResult, error)
	AuthLogin(ctx context.Context, in *AuthData, opts ...grpc.CallOption) (*AuthRegResult, error)
	ChainSize(ctx context.Context, in *Wpar, opts ...grpc.CallOption) (*ResponseSize, error)
	Balance(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Lanb, error)
	ViewCandidates(ctx context.Context, in *Wpar, opts ...grpc.CallOption) (BLCH_Contract_ViewCandidatesClient, error)
	Transfer(ctx context.Context, in *LowDataChain, opts ...grpc.CallOption) (*IsComplited, error)
	Vote(ctx context.Context, in *LowData, opts ...grpc.CallOption) (*IsComplited, error)
	TimeBlock(ctx context.Context, in *Wpar, opts ...grpc.CallOption) (BLCH_Contract_TimeBlockClient, error)
	ChainPrint(ctx context.Context, in *Wpar, opts ...grpc.CallOption) (*Chain, error)
	ResultsWinner(ctx context.Context, in *Wpar, opts ...grpc.CallOption) (BLCH_Contract_ResultsWinnerClient, error)
	SoloWinner(ctx context.Context, in *Wpar, opts ...grpc.CallOption) (*CandidateList, error)
}

type bLCH_ContractClient struct {
	cc grpc.ClientConnInterface
}

func NewBLCH_ContractClient(cc grpc.ClientConnInterface) BLCH_ContractClient {
	return &bLCH_ContractClient{cc}
}

func (c *bLCH_ContractClient) AuthRegister(ctx context.Context, in *RegData, opts ...grpc.CallOption) (*AuthRegResult, error) {
	out := new(AuthRegResult)
	err := c.cc.Invoke(ctx, "/Contract.BLCH_Contract/AuthRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bLCH_ContractClient) AuthLogin(ctx context.Context, in *AuthData, opts ...grpc.CallOption) (*AuthRegResult, error) {
	out := new(AuthRegResult)
	err := c.cc.Invoke(ctx, "/Contract.BLCH_Contract/AuthLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bLCH_ContractClient) ChainSize(ctx context.Context, in *Wpar, opts ...grpc.CallOption) (*ResponseSize, error) {
	out := new(ResponseSize)
	err := c.cc.Invoke(ctx, "/Contract.BLCH_Contract/ChainSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bLCH_ContractClient) Balance(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Lanb, error) {
	out := new(Lanb)
	err := c.cc.Invoke(ctx, "/Contract.BLCH_Contract/Balance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bLCH_ContractClient) ViewCandidates(ctx context.Context, in *Wpar, opts ...grpc.CallOption) (BLCH_Contract_ViewCandidatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &BLCH_Contract_ServiceDesc.Streams[0], "/Contract.BLCH_Contract/ViewCandidates", opts...)
	if err != nil {
		return nil, err
	}
	x := &bLCH_ContractViewCandidatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BLCH_Contract_ViewCandidatesClient interface {
	Recv() (*CandidateList, error)
	grpc.ClientStream
}

type bLCH_ContractViewCandidatesClient struct {
	grpc.ClientStream
}

func (x *bLCH_ContractViewCandidatesClient) Recv() (*CandidateList, error) {
	m := new(CandidateList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bLCH_ContractClient) Transfer(ctx context.Context, in *LowDataChain, opts ...grpc.CallOption) (*IsComplited, error) {
	out := new(IsComplited)
	err := c.cc.Invoke(ctx, "/Contract.BLCH_Contract/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bLCH_ContractClient) Vote(ctx context.Context, in *LowData, opts ...grpc.CallOption) (*IsComplited, error) {
	out := new(IsComplited)
	err := c.cc.Invoke(ctx, "/Contract.BLCH_Contract/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bLCH_ContractClient) TimeBlock(ctx context.Context, in *Wpar, opts ...grpc.CallOption) (BLCH_Contract_TimeBlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &BLCH_Contract_ServiceDesc.Streams[1], "/Contract.BLCH_Contract/TimeBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &bLCH_ContractTimeBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BLCH_Contract_TimeBlockClient interface {
	Recv() (*TimeData, error)
	grpc.ClientStream
}

type bLCH_ContractTimeBlockClient struct {
	grpc.ClientStream
}

func (x *bLCH_ContractTimeBlockClient) Recv() (*TimeData, error) {
	m := new(TimeData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bLCH_ContractClient) ChainPrint(ctx context.Context, in *Wpar, opts ...grpc.CallOption) (*Chain, error) {
	out := new(Chain)
	err := c.cc.Invoke(ctx, "/Contract.BLCH_Contract/ChainPrint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bLCH_ContractClient) ResultsWinner(ctx context.Context, in *Wpar, opts ...grpc.CallOption) (BLCH_Contract_ResultsWinnerClient, error) {
	stream, err := c.cc.NewStream(ctx, &BLCH_Contract_ServiceDesc.Streams[2], "/Contract.BLCH_Contract/ResultsWinner", opts...)
	if err != nil {
		return nil, err
	}
	x := &bLCH_ContractResultsWinnerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BLCH_Contract_ResultsWinnerClient interface {
	Recv() (*CandidateListWithBalance, error)
	grpc.ClientStream
}

type bLCH_ContractResultsWinnerClient struct {
	grpc.ClientStream
}

func (x *bLCH_ContractResultsWinnerClient) Recv() (*CandidateListWithBalance, error) {
	m := new(CandidateListWithBalance)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bLCH_ContractClient) SoloWinner(ctx context.Context, in *Wpar, opts ...grpc.CallOption) (*CandidateList, error) {
	out := new(CandidateList)
	err := c.cc.Invoke(ctx, "/Contract.BLCH_Contract/SoloWinner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BLCH_ContractServer is the server API for BLCH_Contract service.
// All implementations must embed UnimplementedBLCH_ContractServer
// for forward compatibility
type BLCH_ContractServer interface {
	AuthRegister(context.Context, *RegData) (*AuthRegResult, error)
	AuthLogin(context.Context, *AuthData) (*AuthRegResult, error)
	ChainSize(context.Context, *Wpar) (*ResponseSize, error)
	Balance(context.Context, *Address) (*Lanb, error)
	ViewCandidates(*Wpar, BLCH_Contract_ViewCandidatesServer) error
	Transfer(context.Context, *LowDataChain) (*IsComplited, error)
	Vote(context.Context, *LowData) (*IsComplited, error)
	TimeBlock(*Wpar, BLCH_Contract_TimeBlockServer) error
	ChainPrint(context.Context, *Wpar) (*Chain, error)
	ResultsWinner(*Wpar, BLCH_Contract_ResultsWinnerServer) error
	SoloWinner(context.Context, *Wpar) (*CandidateList, error)
	mustEmbedUnimplementedBLCH_ContractServer()
}

// UnimplementedBLCH_ContractServer must be embedded to have forward compatible implementations.
type UnimplementedBLCH_ContractServer struct {
}

func (UnimplementedBLCH_ContractServer) AuthRegister(context.Context, *RegData) (*AuthRegResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthRegister not implemented")
}
func (UnimplementedBLCH_ContractServer) AuthLogin(context.Context, *AuthData) (*AuthRegResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogin not implemented")
}
func (UnimplementedBLCH_ContractServer) ChainSize(context.Context, *Wpar) (*ResponseSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainSize not implemented")
}
func (UnimplementedBLCH_ContractServer) Balance(context.Context, *Address) (*Lanb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (UnimplementedBLCH_ContractServer) ViewCandidates(*Wpar, BLCH_Contract_ViewCandidatesServer) error {
	return status.Errorf(codes.Unimplemented, "method ViewCandidates not implemented")
}
func (UnimplementedBLCH_ContractServer) Transfer(context.Context, *LowDataChain) (*IsComplited, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedBLCH_ContractServer) Vote(context.Context, *LowData) (*IsComplited, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedBLCH_ContractServer) TimeBlock(*Wpar, BLCH_Contract_TimeBlockServer) error {
	return status.Errorf(codes.Unimplemented, "method TimeBlock not implemented")
}
func (UnimplementedBLCH_ContractServer) ChainPrint(context.Context, *Wpar) (*Chain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainPrint not implemented")
}
func (UnimplementedBLCH_ContractServer) ResultsWinner(*Wpar, BLCH_Contract_ResultsWinnerServer) error {
	return status.Errorf(codes.Unimplemented, "method ResultsWinner not implemented")
}
func (UnimplementedBLCH_ContractServer) SoloWinner(context.Context, *Wpar) (*CandidateList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoloWinner not implemented")
}
func (UnimplementedBLCH_ContractServer) mustEmbedUnimplementedBLCH_ContractServer() {}

// UnsafeBLCH_ContractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BLCH_ContractServer will
// result in compilation errors.
type UnsafeBLCH_ContractServer interface {
	mustEmbedUnimplementedBLCH_ContractServer()
}

func RegisterBLCH_ContractServer(s grpc.ServiceRegistrar, srv BLCH_ContractServer) {
	s.RegisterService(&BLCH_Contract_ServiceDesc, srv)
}

func _BLCH_Contract_AuthRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLCH_ContractServer).AuthRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contract.BLCH_Contract/AuthRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLCH_ContractServer).AuthRegister(ctx, req.(*RegData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BLCH_Contract_AuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLCH_ContractServer).AuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contract.BLCH_Contract/AuthLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLCH_ContractServer).AuthLogin(ctx, req.(*AuthData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BLCH_Contract_ChainSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Wpar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLCH_ContractServer).ChainSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contract.BLCH_Contract/ChainSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLCH_ContractServer).ChainSize(ctx, req.(*Wpar))
	}
	return interceptor(ctx, in, info, handler)
}

func _BLCH_Contract_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLCH_ContractServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contract.BLCH_Contract/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLCH_ContractServer).Balance(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _BLCH_Contract_ViewCandidates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Wpar)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BLCH_ContractServer).ViewCandidates(m, &bLCH_ContractViewCandidatesServer{stream})
}

type BLCH_Contract_ViewCandidatesServer interface {
	Send(*CandidateList) error
	grpc.ServerStream
}

type bLCH_ContractViewCandidatesServer struct {
	grpc.ServerStream
}

func (x *bLCH_ContractViewCandidatesServer) Send(m *CandidateList) error {
	return x.ServerStream.SendMsg(m)
}

func _BLCH_Contract_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LowDataChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLCH_ContractServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contract.BLCH_Contract/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLCH_ContractServer).Transfer(ctx, req.(*LowDataChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _BLCH_Contract_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LowData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLCH_ContractServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contract.BLCH_Contract/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLCH_ContractServer).Vote(ctx, req.(*LowData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BLCH_Contract_TimeBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Wpar)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BLCH_ContractServer).TimeBlock(m, &bLCH_ContractTimeBlockServer{stream})
}

type BLCH_Contract_TimeBlockServer interface {
	Send(*TimeData) error
	grpc.ServerStream
}

type bLCH_ContractTimeBlockServer struct {
	grpc.ServerStream
}

func (x *bLCH_ContractTimeBlockServer) Send(m *TimeData) error {
	return x.ServerStream.SendMsg(m)
}

func _BLCH_Contract_ChainPrint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Wpar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLCH_ContractServer).ChainPrint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contract.BLCH_Contract/ChainPrint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLCH_ContractServer).ChainPrint(ctx, req.(*Wpar))
	}
	return interceptor(ctx, in, info, handler)
}

func _BLCH_Contract_ResultsWinner_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Wpar)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BLCH_ContractServer).ResultsWinner(m, &bLCH_ContractResultsWinnerServer{stream})
}

type BLCH_Contract_ResultsWinnerServer interface {
	Send(*CandidateListWithBalance) error
	grpc.ServerStream
}

type bLCH_ContractResultsWinnerServer struct {
	grpc.ServerStream
}

func (x *bLCH_ContractResultsWinnerServer) Send(m *CandidateListWithBalance) error {
	return x.ServerStream.SendMsg(m)
}

func _BLCH_Contract_SoloWinner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Wpar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BLCH_ContractServer).SoloWinner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contract.BLCH_Contract/SoloWinner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BLCH_ContractServer).SoloWinner(ctx, req.(*Wpar))
	}
	return interceptor(ctx, in, info, handler)
}

// BLCH_Contract_ServiceDesc is the grpc.ServiceDesc for BLCH_Contract service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BLCH_Contract_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Contract.BLCH_Contract",
	HandlerType: (*BLCH_ContractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthRegister",
			Handler:    _BLCH_Contract_AuthRegister_Handler,
		},
		{
			MethodName: "AuthLogin",
			Handler:    _BLCH_Contract_AuthLogin_Handler,
		},
		{
			MethodName: "ChainSize",
			Handler:    _BLCH_Contract_ChainSize_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _BLCH_Contract_Balance_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _BLCH_Contract_Transfer_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _BLCH_Contract_Vote_Handler,
		},
		{
			MethodName: "ChainPrint",
			Handler:    _BLCH_Contract_ChainPrint_Handler,
		},
		{
			MethodName: "SoloWinner",
			Handler:    _BLCH_Contract_SoloWinner_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ViewCandidates",
			Handler:       _BLCH_Contract_ViewCandidates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TimeBlock",
			Handler:       _BLCH_Contract_TimeBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ResultsWinner",
			Handler:       _BLCH_Contract_ResultsWinner_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "API/Proto/ProtoContract.proto",
}
