syntax = "proto3";

option go_package = "./";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

service Contract {
  rpc NewChain(NewChainRequest) returns (NewChainResponse);
  rpc CallCreateVoters(CallCreateVotersRequest) returns (CallCreateVotersResponse);
  rpc CallNewCandidate(CallNewCandidateRequest) returns (CallNewCandidateResponse);
  rpc CallViewCandidates(CallNewCandidateRequest) returns (CallNewCandidateResponse);
  rpc WinnersList(WinnersListRequest) returns (WinnersListResponse);
  rpc SoloWinner(SoloWinnerRequest) returns (SoloWinnerResponse);
  rpc ChainSize() returns ();
  rpc GetPartOfChain() returns ();
  rpc GetFullChain() returns ();
  rpc AcceptNewUser() returns ();
  rpc AcceptLoadUser() returns ();
  rpc Vote() returns ();
}

message NewChainRequest {
  string master = 1;
  int32 votesCount = 2;
  google.protobuf.Timestamp limitTime = 3;
}
message NewChainResponse {
  CreateHelp CreateHelpProto = 1;
  string error = 2;
}
message CreateHelp {
  string Status = 1;
}
message CallCreateVotersRequest {
  google.protobuf.Any voter = 1;
  string master = 2;
}
message CallCreateVotersResponse {
  repeated BlockchainUser user = 1;
  string error = 2;
}
message BlockchainUser {
  string Id = 1;
  string PublicKey = 2;
  bool IsUsed = 3;
  string Affiliation = 4;
}
message CallViewCandidatesRequest {
  string master = 1;
}
message CallViewCandidatesResponse {
  repeated BlockchainElectionSubjects electionSubjects = 1;
  string error = 2;
}
message BlockchainElectionSubjects {
  string Id = 1;
  string PublicKey = 2;
  bool Description = 3;
  string VotingAffiliation = 4;
}
message CallNewCandidateRequest {
  string description = 1;
  string affiliation = 2;
}
message CallNewCandidateResponse {
  BlockchainElectionSubjects electionSubjects = 1;
  string error = 2;
}
message WinnersListRequest {
  string master = 1;
}
message WinnersListResponse {
  repeated ContractElectionsList electionList = 1;
  string error = 2;
}
message ContractElectionsList {
  BlockchainElectionSubjects electionSubjects = 1;
  string Balance = 2;
}
message SoloWinnerRequest {
  string master = 1;
}
message SoloWinnerResponse {
  ContractElectionsList electionList = 1;
  string error = 2;
}


